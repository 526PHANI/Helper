{
    "title": "SQL Cheat Sheet",
    "sections": [
      {
        
            "title": "Basic Queries",
            "content": [
              {
                "description": "Fetch all columns and rows from a table",
                "code": "SELECT * FROM employees;"
              },
              {
                "description": "Fetch specific columns from a table",
                "code": "SELECT name, salary FROM employees;"
              },
              {
                "description": "Fetch unique values from a column",
                "code": "SELECT DISTINCT department FROM employees;"
              },
              {
                "description": "Fetch limited rows (e.g., first 5 rows)",
                "code": "SELECT * FROM employees LIMIT 5;"
              },
              {
                "description": "Fetch rows with aliased column names",
                "code": "SELECT name AS employee_name, salary AS employee_salary FROM employees;"
              },
              {
                "description": "Fetch rows with calculated columns (e.g., annual salary)",
                "code": "SELECT name, salary * 12 AS annual_salary FROM employees;"
              },
              {
                "description": "Fetch rows with a WHERE condition (e.g., employees with salary > 50,000)",
                "code": "SELECT * FROM employees WHERE salary > 50000;"
              },
              {
                "description": "Fetch rows with multiple conditions (e.g., employees in IT department earning more than 60,000)",
                "code": "SELECT * FROM employees WHERE department = 'IT' AND salary > 60000;"
              },
              {
                "description": "Fetch rows where name contains 'John' (pattern matching)",
                "code": "SELECT * FROM employees WHERE name LIKE '%John%';"
              },
              {
                "description": "Fetch rows sorted in ascending order of salary",
                "code": "SELECT * FROM employees ORDER BY salary ASC;"
              },
              {
                "description": "Fetch rows sorted in descending order of salary",
                "code": "SELECT * FROM employees ORDER BY salary DESC;"
              },
              {
                "description": "Fetch the top 3 highest-paid employees",
                "code": "SELECT * FROM employees ORDER BY salary DESC LIMIT 3;"
              },
              {
                "description": "Count the number of employees in a department",
                "code": "SELECT department, COUNT(*) FROM employees GROUP BY department;"
              },
              {
                "description": "Find the highest salary from employees",
                "code": "SELECT MAX(salary) AS highest_salary FROM employees;"
              },
              {
                "description": "Find the lowest salary from employees",
                "code": "SELECT MIN(salary) AS lowest_salary FROM employees;"
              },
              {
                "description": "Calculate the average salary of employees",
                "code": "SELECT AVG(salary) AS average_salary FROM employees;"
              },
              {
                "description": "Find the total salary expense of a company",
                "code": "SELECT SUM(salary) AS total_salary FROM employees;"
              },
              {
                "description": "Fetch employees with NULL values in the department column",
                "code": "SELECT * FROM employees WHERE department IS NULL;"
              },
              {
                "description": "Fetch employees whose salaries are between 40,000 and 80,000",
                "code": "SELECT * FROM employees WHERE salary BETWEEN 40000 AND 80000;"
              },
              {
                "description": "Fetch employees who belong to multiple departments",
                "code": "SELECT * FROM employees WHERE department IN ('HR', 'IT', 'Finance');"
              }
            ]
          },
          
          {
            "title": "Filtering Data",
            "content": [
              {
                "description": "Fetch rows where age is greater than 30",
                "code": "SELECT * FROM employees WHERE age > 30;"
              },
              {
                "description": "Fetch rows in the 'Sales' department",
                "code": "SELECT * FROM employees WHERE department = 'Sales';"
              },
              {
                "description": "Fetch rows with salary between 50k and 60k",
                "code": "SELECT * FROM employees WHERE salary BETWEEN 50000 AND 60000;"
              },
              {
                "description": "Fetch rows with names starting with 'J'",
                "code": "SELECT * FROM employees WHERE name LIKE 'J%';"
              },
              {
                "description": "Fetch rows with names ending with 'n'",
                "code": "SELECT * FROM employees WHERE name LIKE '%n';"
              },
              {
                "description": "Fetch rows where name contains 'smith'",
                "code": "SELECT * FROM employees WHERE name LIKE '%smith%';"
              },
              {
                "description": "Fetch rows where department is not 'HR'",
                "code": "SELECT * FROM employees WHERE department <> 'HR';"
              },
              {
                "description": "Fetch rows where salary is NULL",
                "code": "SELECT * FROM employees WHERE salary IS NULL;"
              },
              {
                "description": "Fetch rows where salary is NOT NULL",
                "code": "SELECT * FROM employees WHERE salary IS NOT NULL;"
              },
              {
                "description": "Fetch rows where age is either 28 or 34",
                "code": "SELECT * FROM employees WHERE age IN (28, 34);"
              },
              {
                "description": "Fetch rows where age is NOT 28 or 34",
                "code": "SELECT * FROM employees WHERE age NOT IN (28, 34);"
              },
              {
                "description": "Fetch rows where age is greater than 25 and department is 'IT'",
                "code": "SELECT * FROM employees WHERE age > 25 AND department = 'IT';"
              },
              {
                "description": "Fetch rows where age is less than 30 OR salary is greater than 70,000",
                "code": "SELECT * FROM employees WHERE age < 30 OR salary > 70000;"
              },
              {
                "description": "Fetch rows where department is 'Finance' and salary is between 40k and 80k",
                "code": "SELECT * FROM employees WHERE department = 'Finance' AND salary BETWEEN 40000 AND 80000;"
              },
              {
                "description": "Fetch rows where employees do not belong to 'Sales' or 'IT'",
                "code": "SELECT * FROM employees WHERE department NOT IN ('Sales', 'IT');"
              },
              {
                "description": "Fetch rows where employees have either a NULL or 0 salary",
                "code": "SELECT * FROM employees WHERE salary IS NULL OR salary = 0;"
              },
              {
                "description": "Fetch rows where employees have a non-null salary greater than 50,000",
                "code": "SELECT * FROM employees WHERE salary IS NOT NULL AND salary > 50000;"
              },
              {
                "description": "Fetch rows where the name is exactly 'John Doe' (case-sensitive in some databases)",
                "code": "SELECT * FROM employees WHERE name = 'John Doe';"
              },
              {
                "description": "Fetch rows where the department field contains only an empty string",
                "code": "SELECT * FROM employees WHERE department = '';"
              }
            ]
          },
          
          {
            "title": "Sorting Data",
            "content": [
              {
                "description": "Sort by salary in descending order",
                "code": "SELECT * FROM employees ORDER BY salary DESC;"
              },
              {
                "description": "Sort by age in ascending order",
                "code": "SELECT * FROM employees ORDER BY age ASC;"
              },
              {
                "description": "Sort by department (ascending) and salary (descending)",
                "code": "SELECT * FROM employees ORDER BY department ASC, salary DESC;"
              },
              {
                "description": "Sort by name alphabetically",
                "code": "SELECT * FROM employees ORDER BY name;"
              },
              {
                "description": "Sort by joining date in descending order (latest first)",
                "code": "SELECT * FROM employees ORDER BY joining_date DESC;"
              },
              {
                "description": "Sort by department in descending order and then by name in ascending order",
                "code": "SELECT * FROM employees ORDER BY department DESC, name ASC;"
              },
              {
                "description": "Sort by age in descending order, showing oldest employees first",
                "code": "SELECT * FROM employees ORDER BY age DESC;"
              },
              {
                "description": "Sort by length of name (shortest first)",
                "code": "SELECT * FROM employees ORDER BY LENGTH(name) ASC;"
              },
              {
                "description": "Sort by salary in ascending order, handling NULL values last",
                "code": "SELECT * FROM employees ORDER BY salary ASC NULLS LAST;"
              },
              {
                "description": "Sort by department, but keep NULL values at the beginning",
                "code": "SELECT * FROM employees ORDER BY department ASC NULLS FIRST;"
              },
              {
                "description": "Sort by number of years of experience (assuming 'experience' column exists)",
                "code": "SELECT * FROM employees ORDER BY experience DESC;"
              },
              {
                "description": "Sort by salary and show only the top 10 highest-paid employees",
                "code": "SELECT * FROM employees ORDER BY salary DESC LIMIT 10;"
              },
              {
                "description": "Sort by name case-insensitively",
                "code": "SELECT * FROM employees ORDER BY LOWER(name);"
              },
              {
                "description": "Sort by birth year extracted from the date of birth column",
                "code": "SELECT * FROM employees ORDER BY YEAR(date_of_birth) ASC;"
              }
            ]
          }
          ,
      {
        "title": "Aggregate Functions",
        "content": [
          {
            "description": "Calculate the average salary of all employees",
            "code": "SELECT AVG(salary) FROM employees;"
          },
          {
            "description": "Count the total number of employees",
            "code": "SELECT COUNT(*) FROM employees;"
          },
          {
            "description": "Find the highest salary in the 'IT' department",
            "code": "SELECT MAX(salary) FROM employees WHERE department = 'IT';"
          },
          {
            "description": "Find the lowest salary in the company",
            "code": "SELECT MIN(salary) FROM employees;"
          },
          {
            "description": "Calculate the total salary expenditure",
            "code": "SELECT SUM(salary) FROM employees;"
          },
          {
            "description": "Count the number of employees in each department",
            "code": "SELECT department, COUNT(*) FROM employees GROUP BY department;"
          }
        ]
      },
      {
        "title": "Grouping Data",
        "content": [
          {
            "description": "Calculate the average salary by department",
            "code": "SELECT department, AVG(salary) FROM employees GROUP BY department;"
          },
          {
            "description": "Count the number of employees in each department",
            "code": "SELECT department, COUNT(*) FROM employees GROUP BY department;"
          },
          {
            "description": "Find departments with more than 2 employees",
            "code": "SELECT department, COUNT(*) FROM employees GROUP BY department HAVING COUNT(*) > 2;"
          },
          {
            "description": "Calculate the total salary by department",
            "code": "SELECT department, SUM(salary) FROM employees GROUP BY department;"
          }
        ]
      },
      {
        "title": "Joins",
        "content": [
          {
            "description": "Inner Join: Fetch employees with their department names",
            "code": "SELECT employees.name, departments.name FROM employees INNER JOIN departments ON employees.department_id = departments.id;"
          },
          {
            "description": "Left Join: Fetch all employees and their departments (if any)",
            "code": "SELECT employees.name, departments.name FROM employees LEFT JOIN departments ON employees.department_id = departments.id;"
          },
          {
            "description": "Right Join: Fetch all departments and their employees (if any)",
            "code": "SELECT employees.name, departments.name FROM employees RIGHT JOIN departments ON employees.department_id = departments.id;"
          },
          {
            "description": "Full Outer Join: Fetch all employees and departments",
            "code": "SELECT employees.name, departments.name FROM employees FULL OUTER JOIN departments ON employees.department_id = departments.id;"
          },
          {
            "description": "Self Join: Fetch employees and their managers",
            "code": "SELECT e1.name AS employee, e2.name AS manager FROM employees e1 INNER JOIN employees e2 ON e1.manager_id = e2.id;"
          },
          {
            "description": "Join with multiple tables: Fetch employees, their department names, and locations",
            "code": "SELECT employees.name, departments.name, locations.city FROM employees INNER JOIN departments ON employees.department_id = departments.id INNER JOIN locations ON departments.location_id = locations.id;"
          },
          {
            "description": "Join with WHERE condition: Fetch employees who belong to 'Sales' department",
            "code": "SELECT employees.name FROM employees INNER JOIN departments ON employees.department_id = departments.id WHERE departments.name = 'Sales';"
          },
          {
            "description": "Using a cross join: Get all possible employee and project combinations",
            "code": "SELECT employees.name, projects.title FROM employees CROSS JOIN projects;"
          },
          {
            "description": "Using NATURAL JOIN: Fetch employees and departments automatically matching common columns",
            "code": "SELECT employees.name, departments.name FROM employees NATURAL JOIN departments;"
          },
          {
            "description": "Join with Aggregate: Fetch department-wise average salary",
            "code": "SELECT departments.name, AVG(employees.salary) AS avg_salary FROM employees INNER JOIN departments ON employees.department_id = departments.id GROUP BY departments.name;"
          },
          {
            "description": "Join with COUNT: Get department-wise employee count",
            "code": "SELECT departments.name, COUNT(employees.id) AS employee_count FROM employees INNER JOIN departments ON employees.department_id = departments.id GROUP BY departments.name;"
          },
          {
            "description": "Join with HAVING clause: Fetch departments with more than 10 employees",
            "code": "SELECT departments.name, COUNT(employees.id) AS employee_count FROM employees INNER JOIN departments ON employees.department_id = departments.id GROUP BY departments.name HAVING COUNT(employees.id) > 10;"
          },
          {
            "description": "Left Join with NULL check: Fetch employees who are not assigned to any department",
            "code": "SELECT employees.name FROM employees LEFT JOIN departments ON employees.department_id = departments.id WHERE departments.id IS NULL;"
          },
          {
            "description": "Right Join with NULL check: Fetch departments with no employees",
            "code": "SELECT departments.name FROM employees RIGHT JOIN departments ON employees.department_id = departments.id WHERE employees.id IS NULL;"
          }
        ]
      }
      ,
      {
        "title": "Subqueries",
        "content": [
          {
            "description": "Fetch employees with above-average salary",
            "code": "SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);"
          },
          {
            "description": "Fetch departments with no employees",
            "code": "SELECT name FROM departments WHERE id NOT IN (SELECT department_id FROM employees);"
          },
          {
            "description": "Fetch the second highest salary",
            "code": "SELECT MAX(salary) FROM employees WHERE salary < (SELECT MAX(salary) FROM employees);"
          }
        ]
      },
      {
        "title": "Data Modification",
        "content": [
          {
            "description": "Insert a new employee",
            "code": "INSERT INTO employees (name, age, department, salary) VALUES ('Eva Green', 27, 'HR', 58000);"
          },
          {
            "description": "Update an employee's salary",
            "code": "UPDATE employees SET salary = 62000 WHERE id = 2;"
          },
          {
            "description": "Delete an employee",
            "code": "DELETE FROM employees WHERE id = 5;"
          },
          {
            "description": "Insert multiple rows at once",
            "code": "INSERT INTO employees (name, age, department, salary) VALUES ('Alice Brown', 29, 'Sales', 55000), ('Bob Johnson', 42, 'IT', 70000);"
          }
        ]
      },
      {
        "title": "Table Management",
        "content": [
          {
            "description": "Create a new table",
            "code": "CREATE TABLE employees (id INT PRIMARY KEY, name VARCHAR(50), age INT, department VARCHAR(50), salary DECIMAL(10, 2));"
          },
          {
            "description": "Add a new column to a table",
            "code": "ALTER TABLE employees ADD COLUMN email VARCHAR(100);"
          },
          {
            "description": "Drop a table",
            "code": "DROP TABLE employees;"
          },
          {
            "description": "Rename a table",
            "code": "ALTER TABLE employees RENAME TO staff;"
          },
          {
            "description": "Add a primary key to a table",
            "code": "ALTER TABLE employees ADD PRIMARY KEY (id);"
          }
        ]
      },
      {
        "title": "Advanced Topics",
        "content": [
          {
            "description": "Create an index on a column",
            "code": "CREATE INDEX idx_name ON employees (name);"
          },
          {
            "description": "Begin a transaction",
            "code": "BEGIN TRANSACTION;"
          },
          {
            "description": "Commit a transaction",
            "code": "COMMIT;"
          },
          {
            "description": "Rollback a transaction",
            "code": "ROLLBACK;"
          },
          {
            "description": "Create a view",
            "code": "CREATE VIEW sales_employees AS SELECT * FROM employees WHERE department = 'Sales';"
          },
          {
            "description": "Fetch data from a view",
            "code": "SELECT * FROM sales_employees;"
          }
        ]
      }
    ]
  }